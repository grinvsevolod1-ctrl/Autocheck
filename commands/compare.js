const { getCarByVin } = require('../services/copartApi');
const { formatCarCard } = require('../utils/formatCarCard');
const { evaluateCar } = require('../utils/aiFilter');

module.exports = async (ctx) => {
  const parts = ctx.message.text.split(' ');
  const vin1 = parts[1];
  const vin2 = parts[2];

  if (!vin1 || !vin2) return ctx.reply('‚ùó –£–∫–∞–∂–∏—Ç–µ –¥–≤–∞ VIN —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª');

  try {
    const car1 = await getCarByVin(vin1);
    const car2 = await getCarByVin(vin2);

    if (!car1 || !car2) return ctx.reply('üö´ –û–¥–∏–Ω –∏–∑ VIN –Ω–µ –Ω–∞–π–¥–µ–Ω');

    const ai1 = await evaluateCar(car1);
    const ai2 = await evaluateCar(car2);

    const msg1 = `üîé VIN ${vin1}\n` + formatCarCard(car1) + `\nüî• –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${ai1.potential}\nüí¨ ${ai1.description}`;
    const msg2 = `üîé VIN ${vin2}\n` + formatCarCard(car2) + `\nüî• –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${ai2.potential}\nüí¨ ${ai2.description}`;

    ctx.reply(msg1);
    ctx.reply(msg2);

    const summary = `
üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:
‚Ä¢ ${car1.make} ${car1.model} (${vin1}) ‚Äî –º–∞—Ä–∂–∞ $${car1.profit}, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${ai1.potential}
‚Ä¢ ${car2.make} ${car2.model} (${vin2}) ‚Äî –º–∞—Ä–∂–∞ $${car2.profit}, –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: ${ai2.potential}

üí° –í—ã–≤–æ–¥: ${car1.profit > car2.profit ? vin1 : vin2} –≤—ã–≥–ª—è–¥–∏—Ç –≤—ã–≥–æ–¥–Ω–µ–µ –ø–æ –º–∞—Ä–∂–µ.
`;
    ctx.reply(summary);
  } catch (err) {
    console.error(err);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ VIN');
  }
};