const { OpenAI } = require('openai');
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// üìä AI-–æ—Ü–µ–Ω–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
module.exports.evaluateCar = async (car) => {
  const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –°–®–ê. –û—Ü–µ–Ω–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ª–æ—Ç–∞. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥: —Å—Ç–æ–∏—Ç –ª–∏ –µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω, –∏ –∫–∞–∫ –µ–≥–æ –º–æ–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å –¥–ª—è Telegram-–∫–∞—Ä—Ç–æ—á–∫–∏.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–ú–∞—Ä–∫–∞: ${car.make}
–ú–æ–¥–µ–ª—å: ${car.model}
–ì–æ–¥: ${car.year}
–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: ${car.damage}
–ü—Ä–æ–±–µ–≥: ${car.mileage}
–õ–æ–∫–∞—Ü–∏—è: ${car.location}
–°—Ç–∞–≤–∫–∞: $${car.bid}
–ú–∞—Ä–∂–∞: $${car.profit}
–°—Å—ã–ª–∫–∞: ${car.link}

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
- üî• –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]
- üí¨ –û–ø–∏—Å–∞–Ω–∏–µ: [—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è Telegram]
`;

  try {
    const res = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7
    });

    const output = res.choices[0].message.content;
    const potential = output.match(/–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª: (.+)/)?.[1]?.trim();
    const description = output.match(/–û–ø–∏—Å–∞–Ω–∏–µ: (.+)/)?.[1]?.trim();

    return { potential, description };
  } catch (err) {
    console.error('‚ùå AI-—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∞:', err.message);
    return { potential: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', description: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' };
  }
};