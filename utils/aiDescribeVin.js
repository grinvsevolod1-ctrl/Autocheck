const { OpenAI } = require('openai');
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

module.exports.describeVin = async (car) => {
  const prompt = `
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É –±—Ä–µ–Ω–¥–∏–Ω–≥—É –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–∏—Ç –Ω–∞ –ø–æ–∫—É–ø–∫—É. –£–ø–æ—Ä –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å, –∞—Ç–º–æ—Å—Ñ–µ—Ä—É, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–µ–º–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
–ú–∞—Ä–∫–∞: ${car.make}
–ú–æ–¥–µ–ª—å: ${car.model}
–ì–æ–¥: ${car.year}
–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ: ${car.damage}
–ü—Ä–æ–±–µ–≥: ${car.mileage}
–õ–æ–∫–∞—Ü–∏—è: ${car.location}
–°—Ç–∞–≤–∫–∞: $${car.bid}
–ú–∞—Ä–∂–∞: $${car.profit}
–°—Å—ã–ª–∫–∞: ${car.link}

–í—ã–≤–µ–¥–∏:
1. üî• –í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: [–≤—ã—Å–æ–∫–∏–π/—Å—Ä–µ–¥–Ω–∏–π/–Ω–∏–∑–∫–∏–π]
2. üí¨ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: [–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤]
`;

  try {
    const res = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.85
    });

    const output = res.choices[0].message.content;
    const potential = output.match(/–í–∏–∑—É–∞–ª—å–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª: (.+)/)?.[1]?.trim();
    const description = output.match(/–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: (.+)/)?.[1]?.trim();

    return { potential, description };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è VIN:', err.message);
    return { potential: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', description: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' };
  }
};